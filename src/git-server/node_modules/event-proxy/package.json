{
  "author": {
    "name": "Beau Sorensen",
    "email": "mail@beausorensen.com",
    "url": "http://github.com/sorensen"
  },
  "name": "event-proxy",
  "description": "Event proxying for node.js or the browser",
  "version": "0.0.1",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/sorensen/event-proxy.git"
  },
  "engines": {
    "node": "0.x"
  },
  "main": "index.js",
  "scripts": {
    "test": "make test"
  },
  "devDependencies": {
    "mocha": "~1.8.1"
  },
  "readme": "\nEvent Proxy\n===========\n\n[![Build Status](https://secure.travis-ci.org/sorensen/event-proxy.png)](http://travis-ci.org/sorensen/event-proxy) \n\nEvent proxying for node.js or the browser.  Simple utility to route events to \nmethods with the ability to preserve scope or pass additional arguments. Can be \nused with `EventEmitter`, `jQuery`, `socket.io`, or `Backbone.Events`.\n\n\nUsage\n-----\n\nNode.js\n\n``` js\nvar proxy = require('event-proxy')\n```\n\nBrowser\n\n``` html\n<script src=\"event-proxy.min.js\"></script>\n```\n\n\nMethods\n-------\n\n### proxy(scope, map, emitter, â€¦)\n\n* `scope` \n* `map`\n* `emitter`\n\nProxy all events from the emitter to their mapped functions with the applied \nscope. If the functions are strings, they must be present on the scope. Any \nadditional arguments supplied to proxy are in turn sent to each method.\n\n```js\nvar emitter = new require('events').EventEmitter\n\nfunction meow(hi, animal) {\n  console.log(hi) // 'hi'\n  console.log(animal) // 'cat'\n}\nfunction bark(hi, animal) {\n  console.log(hi) // 'hi'\n  console.log(animal) // 'dog'\n}\n\nvar map = {\n  meow: meow\n, bark: bark\n}\nproxy(process, map, emitter, 'hi')\n\nemitter.emit('bark', 'dog')\nemitter.emit('meow', 'cat')\n```\n\nThe `map` can also be an array of methods.\n\n```js\nfunction one() {}\nfunction two() {}\n\nvar map = {\n  'hi': [one, two]\n}\nproxy(null, map, emitter)\n\nemitter.emit('hi') // `one` and `two` both called\n```\n\nIf an array is suppied, the values are assumed to be both event emitted and method\nnames of the given scope.\n\n```js\nvar foo = {\n  one: function() {}\n, two: function() {}\n}\nproxy(foo, ['one', 'two'], emitter)\n\nemitter.emit('one') // `one` called\nemitter.emit('two') // `two` called\n```\n\nAdditional arguments can be proxied as well, lets assume we have socket.io setup \non the server. Normally the callbacks supplied to the socket have the socket as \nthe `this` reference, but what if we want our instance as `this`?\n\n```js\nvar io require('socket.io').listen(80)\n\nfunction Engine() {\n  this.things = 'crazy'\n}\nEngine.prototype.drive = function(socket, data) {\n  socket.emit(this.things + data)\n}\nvar map = {\n  drive: 'drive'\n}\nvar engine = new Engine()\n\nio.sockets.on('connection', function(socket) {\n  proxy(engine, map, socket, socket)\n})\n```\n\nThis also works in the browser with jQuery elements.\n\n```html\n<button id=\"btn\">Proxy</button>\n```\n\n```js\nvar $button = $('#btn')\n\nfunction click(event) {\n  console.log(this === $button) // true\n}\n\nfunction mouseover(event) {\n  console.log(this === $button) // true\n}\n\nvar map = {\n  click: click\n, mouseover: mouseover\n}\nproxy(null, map, $button)\n```\n\n### proxy.config(listener)\n\nChange the emitter listener method, default method is `on`\n\n```js\nproxy.config('on')\n```\n\n\nInstall\n-------\n\nWith [npm](https://npmjs.org)\n\n```\nnpm install event-proxy\n```\n\n\nLicense\n-------\n\n(The MIT License)\n\nCopyright (c) 2011-2012 Beau Sorensen <mail@beausorensen.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "readme.md",
  "_id": "event-proxy@0.0.1",
  "dist": {
    "shasum": "0db067ce7242ebe33553a149af68420847e8dc60",
    "tarball": "http://registry.npmjs.org/event-proxy/-/event-proxy-0.0.1.tgz"
  },
  "_npmVersion": "1.1.65",
  "_npmUser": {
    "name": "sorensen",
    "email": "mail@beausorensen.com"
  },
  "maintainers": [
    {
      "name": "sorensen",
      "email": "mail@beausorensen.com"
    }
  ],
  "directories": {},
  "_shasum": "0db067ce7242ebe33553a149af68420847e8dc60",
  "_resolved": "https://registry.npmjs.org/event-proxy/-/event-proxy-0.0.1.tgz",
  "_from": "event-proxy@0.0.1"
}
